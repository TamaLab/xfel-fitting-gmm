#!/usr/bin/env python
from os.path import isfile,isdir
import AFM
import numpy as np
import yaml
import glob
import argparse
import sys
from scipy.stats.stats import pearsonr

def to_bool(value):
    valid = {'true': True, 't': True, '1': True,
             'false': False, 'f': False, '0': False,
             }
    if isinstance(value, bool):
        return value
    if not isinstance(value, basestring):
        raise ValueError('invalid literal for boolean. Not a string.')
    lower_value = value.lower()
    if lower_value in valid:
        return valid[lower_value]
    else:
        raise ValueError('invalid literal for boolean: "%s"' % value)

# Parse arguments
algorithm_choices = ['none','both','rota','trans','transz','transx','transy']
parser = argparse.ArgumentParser(description='Correlation between two 3D GMMs')
parser.add_argument("-f1","--file1",dest="File1",help="input 1")
parser.add_argument("-f2","--file2",dest="File2",help="input 2")
parser.add_argument("-fit","--fit",dest="fit",help="whether to fit ellipsoid(s)?",
                    default=False)
parser.add_argument("-algo","--algo",dest="algo",help="fitting algorithm",
                    default='both',const='both',nargs='?',choices=algorithm_choices)
parser.add_argument("-inpfit","--inpfit",dest="fitInpFile",help="fitting input file",
                    default=None)
parser.add_argument("-outfit","--outfit",dest="fitOutFile",help="fitting output file",
                    default=None)

interactiveSession=False
try:
  __file__
except NameError:
  interactiveSession=True

if interactiveSession:
  print("This script can't be run interactively")
  sys.exit()
else:
  args = parser.parse_args()

if isfile(args.File1):  
  gm1 = AFM.GMData(fromFile=True,filename=args.File1)
else:
  print("Input File1 %s not found" % args.File1)
  sys.exit()
if isfile(args.File2):
  gm2 = AFM.GMData(fromFile=True,filename=args.File2)
else:
  print("Input File2 %s not found" % args.File2)
  sys.exit()

fit = to_bool(args.fit)

if fit: 
  print("File %s taken as source, %s as target" % (args.File2,args.fitInpFile))
  if isfile(args.fitInpFile):
    gmBase = AFM.GMData(fromFile=True,filename=args.fitInpFile)
  else:
    print("Fit Input Base File %s not found" % args.fitInpFile)
    sys.exit()
  vcc = AFM.VolCompare(gm1,gm2,base=gmBase,algo=args.algo)  
  if args.fitOutFile is not None:
    gm2Fitted = vcc.gm2
    gm2Fitted.write(args.fitOutFile)
else:
  vcc = AFM.VolCompare(gm1,gm2)
cc = vcc.getCC()

print("CC %.6f" % cc)


